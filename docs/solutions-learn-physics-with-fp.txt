-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ezoerner/solutions-learn-physics-with-fp#README.md</a>
@package solutions-learn-physics-with-fp
@version 0.1.0.0


module Chapter01


module Chapter02

-- | <pre>
--   f(x) = √ (1 + x)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; f 0
--   1.0
--   
--   &gt;&gt;&gt; f 1
--   1.4142135623730951
--   
--   &gt;&gt;&gt; f 3
--   2.0
--   </pre>
f :: Floating a => a -> a

-- | Standard Earth gravity acceleration at sea level in m/s².
stdGravityMPS2 :: Double

-- | Assuming an initial velocity of 30 m/s, accepts as input the time
--   (after the rock was thrown) in seconds and gives as output the height
--   of the rock in meters.
yRock30 :: Double -> Double

-- | Accepts as input the time (after the rock was thrown) in seconds and
--   gives as output the upward velocity of the rock in meters per second.
--   A downward velocity is returned as a negative number.
vRock30 :: Double -> Double

-- | Computes the sine of an angle given in degrees.
--   
--   <pre>
--   &gt;&gt;&gt; sinDeg 30
--   0.49999999999999994
--   </pre>
sinDeg :: Double -> Double

-- | <pre>
--   f(x) = ∛x
--   </pre>
f' :: Double -> Double

-- | <pre>
--   g(ɣ) = e^ɣ+8^ɣ
--   </pre>
g :: Double -> Double

-- | <pre>
--   h(x) = 1/√((x-5)²+16)
--   </pre>
h :: Double -> Double

-- | <pre>
--   ɣ(β) = 1/√(1 - β²)
--   </pre>
ɣ :: Double -> Double

-- | <pre>
--   U(x) = 1/(10+x)+1(10-x)
--   </pre>
bigU :: Double -> Double

-- | <pre>
--   L(l) = √(l(l + 1))
--   </pre>
bigL :: Double -> Double

-- | <pre>
--   E(x) = 1 / (|x|³)
--   </pre>
bigEx :: Double -> Double

-- | <pre>
--   E(z) = 1 / (z²+4)^(3/2)
--   </pre>
bigEz :: Double -> Double

module Chapter03
f :: Double -> Double
e :: Double -> Double
isXorY :: Char -> Bool
bagFee :: Bool -> Int
bagFee2 :: Bool -> Int
greaterThan50 :: Integer -> Bool
amazingCurve :: Int -> Int
circleRadius :: Double
cot :: Double -> Double
fe :: Double -> Double
fo :: Double -> Double
g :: Double -> Double -> Double

module Chapter04
type R = Double
type Derivative = (R -> R) -> R -> R
derivative :: R -> Derivative
f41 :: R -> R
f42 :: R -> R
df42 :: R -> R
errF :: (R -> R) -> (R -> R) -> R -> R -> R
err42 :: R -> R -> R
errA :: R -> R
f44 :: R -> R
df44 :: R -> R

module Chapter05
sndItem0 :: [a] -> a
repeatInt :: Int -> [Int]
null' :: [a] -> Bool
last' :: [a] -> a
palindrome :: String -> Bool
cycle' :: [a] -> [a]
type R = Double
euler :: R
pi' :: R
fact :: Integer -> Integer
expList :: R -> [R]
calcSeriesLengthWithinPercent :: (R -> [R]) -> (R -> R) -> R -> R -> Maybe Int
expSeries :: R -> [R]

module Chapter06
type R = Double
yRock :: R -> R -> R
vRock :: R -> R -> R

-- | Exercise 6.4.
greaterThanOrEq7' :: Int -> Bool

-- | Exercise 6.5. True if and only if s has length &gt; n
isLongerThan :: Int -> String -> Bool

-- | Exercise 6.6. Has more than 6 elements
hasMoreThan6Elements :: [a] -> Bool

-- | Exercise 6.8.
first1000Squares :: [Integer]

-- | Exercise 6.9.
repeat' :: a -> [a]

-- | Exercise 6.10.
replicate' :: Int -> a -> [a]

module Chapter07
type R = Double
plot1 :: IO ()
plot2 :: IO ()
plot3 :: IO ()
