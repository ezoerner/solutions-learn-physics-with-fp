-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ezoerner/solutions-learn-physics-with-fp#README.md</a>
@package solutions-learn-physics-with-fp
@version 0.1.0.0


-- | <h1>Exercise 1.1.</h1>
--   
--   <i>Evaluate sin 30 in GHCi. Why is it not equal to 0.5?</i>
--   
--   <pre>
--   &gt;&gt;&gt; sin 30
--   -0.9880316240928618
--   </pre>
--   
--   Because <a>sin</a> expects the angle in radians.
--   
--   <pre>
--   &gt;&gt;&gt; sin (30/180 * pi)
--   0.49999999999999994
--   </pre>
--   
--   <h1>Exercise 1.2.</h1>
--   
--   /Add parentheses to the following expressions to indicate the order in
--   which Haskell’s precedence and associativity rules would evaluate the
--   expressions:/
--   
--   <pre>
--   (a) 2 ^ 3 ^ 4
--   (b) 2 / 3 / 4
--   (c) 7 - 5 / 4
--   (d) log 49 / 7
--   </pre>
--   
--   <b>Solutions:</b>
--   
--   <pre>
--   (a) 2 ^ (3 ^ 4)
--   (b) (2 / 3) / 4
--   (c) 7 - (5 / 4)
--   (d) (log 49) / 7
--   </pre>
--   
--   <h1>Exercise 1.3.</h1>
--   
--   <i>Use GHCi to find <tt>log₂ 32.</tt></i>
--   
--   <pre>
--   &gt;&gt;&gt; logBase 2 32
--   5.0
--   </pre>
--   
--   <h1>Exercise 1.4.</h1>
--   
--   <i>Use the <tt>atan2</tt> function in GHCi to find the polar
--   coordinates (r,θ) associated with Cartesian coordinates (x, y) =
--   (–3,4).</i>
--   
--   <pre>
--   &gt;&gt;&gt; theta = atan2 4 (-3)
--   
--   &gt;&gt;&gt; x = -3
--   
--   &gt;&gt;&gt; y = 4
--   
--   &gt;&gt;&gt; theta = atan2 y x
--   
--   &gt;&gt;&gt; r = sqrt (x**2 + y**2)
--   
--   &gt;&gt;&gt; (r, theta)
--   (5.0,2.214297435588181)
--   </pre>
--   
--   <h1>Exercise 1.5.</h1>
--   
--   <i>Find a new example of a calculation in which the computer produces
--   a result that is just a little bit different from the exact
--   result.</i>
--   
--   <pre>
--   &gt;&gt;&gt; 3 ** (logBase 3 10)
--   10.000000000000002
--   </pre>
--   
--   <h1>Exercise 1.6.</h1>
--   
--   <i>Why is there no associativity listed for the equality, inequality,
--   and comparison operators in Table 1-2? (Hint: write down the simplest
--   expression you can think of that would require the associativity rules
--   to resolve the precedence of comparison operators and try to make
--   sense of it.)</i>
--   
--   <pre>
--   3 &lt; 4 &lt; 5
--   </pre>
--   
--   Because comparison, equality, and inequality operators evaluate to
--   Boolean values which cannot be further operated on with these same
--   operators.
module Chapter01

module Chapter02
f :: Floating a => a -> a
stdGravityMPS2 :: Double
yRock30 :: Double -> Double
vRock30 :: Double -> Double
sinDeg :: Double -> Double
cubeRoot :: Double -> Double
g :: Double -> Double
h :: Double -> Double
gamma :: Double -> Double
bigU :: Double -> Double
bigL :: Double -> Double
bigEx :: Double -> Double
bigEz :: Double -> Double

module Chapter03
f :: Double -> Double
e :: Double -> Double
isXorY :: Char -> Bool
bagFee :: Bool -> Int
bagFee2 :: Bool -> Int
greaterThan50 :: Integer -> Bool
amazingCurve :: Int -> Int
circleRadius :: Double
cot :: Double -> Double
fe :: Double -> Double
fo :: Double -> Double
g :: Double -> Double -> Double

module Chapter04
type R = Double
type Derivative = (R -> R) -> R -> R
derivative :: R -> Derivative
f41 :: R -> R
f42 :: R -> R
df42 :: R -> R
errF :: (R -> R) -> (R -> R) -> R -> R -> R
err42 :: R -> R -> R
errA :: R -> R
f44 :: R -> R
df44 :: R -> R

module Chapter05
sndItem0 :: [a] -> a
repeatInt :: Int -> [Int]
null' :: [a] -> Bool
last' :: [a] -> a
palindrome :: String -> Bool
cycle' :: [a] -> [a]
type R = Double
euler :: R
pi' :: R
fact :: Integer -> Integer
expList :: R -> [R]
calcSeriesLengthWithinPercent :: (R -> [R]) -> (R -> R) -> R -> R -> Maybe Int
expSeries :: R -> [R]

module Chapter06
type R = Double
yRock :: R -> R -> R
vRock :: R -> R -> R

-- | Exercise 6.4.
greaterThanOrEq7' :: Int -> Bool

-- | Exercise 6.5. True if and only if s has length &gt; n
isLongerThan :: Int -> String -> Bool

-- | Exercise 6.6. Has more than 6 elements
hasMoreThan6Elements :: [a] -> Bool

-- | Exercise 6.8.
first1000Squares :: [Integer]

-- | Exercise 6.9.
repeat' :: a -> [a]

-- | Exercise 6.10.
replicate' :: Int -> a -> [a]

module Chapter07
type R = Double
plot1 :: IO ()
plot2 :: IO ()
plot3 :: IO ()
